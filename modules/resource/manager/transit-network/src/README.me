# Copyright 2014-2015 National Institute of Advanced Industrial Science and Technology
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

1. Installation

1.1. TN-RM
TN-RM has been provided as a resource management application of eiSoil.
EiSoil code is available from the git repository:

      $ git clone https://github.com/EICT/eiSoil

You can install and setup in accroding with eiSoil documents.

TN-RM code is available from the git repository:

      $ git clone https://github.com/dana-i2cat/felix
      $ cp -Rp felix felix_tnrm
      $ cd felix_tnrm
      $ git checkout trangit-network
      $ cd ..
      $ cp -Rp felix_tnrm/modules/resource/manager/transit-network/src $EISOIL/src/vendor/tnrm
      $ export TNRM=$EISOIL/src/vendor/tnrm

      $ cd src/plugins
      $ rm *
      $ ln -s ../vendor/configdb .
      $ in -s ../vendor/configrpc .
      $ ln -s ../vendor/flaskrpcs .
      $ ln -s ../vendor/geniv3rpc .
      $ in -s ../vendor/tnrm 
      $ cd ../..
      $ mkdir log

      $ sudo apt-get install swig
      $ sudo apt-get install build-essential libssl-dev libffi-dev python-dev
      $ sudo pip install `cat requirements.txt`
	## if some errors occurred, please search www and correct them.

If you want to change service port for the TN-RM, you can use "admin/config_client.py".
TN-RM must be able to access to the mySQL DB with the parameters indicated below.

	mySQLhost = "localhost"
	mySQLuser = "root"
	mySQLpass = "felix"
	mySQLchar = "utf8"

	$ sudo apt-get update
	$ sudo apt-get mysql-server
		New Password fir the MySQL "root" user:
	mysql> mysql --user=root --password=felix
	mysql> Bye
	$ sudo apt-get install python-mysqldb

TN-RM need Jython, Apache CXF 2.7.10 and NSIv2 impllementation by AIST.
Jython, CXF are installed from the respective website:

      - http://www.jython.org/
      - http://cxf.apache.org/

NSIv2 code is provided as aist-nsi2-`date`.tar.gz with TNRM ($TNRM).
NSIv2 code is installed with reference to documents in the tar boll.

If you use GRE tunnel for Transit-Network, you need install RYU SDN Framework. 
See http://osrg.github.io/ryu.

1.2 NSIv2 Client API
      1. extract code form tar.gz
         tar zxvf aist-nsi2-20150910.tar.gz
      2. get CXF and setting
         cd /opt
         wget http://archive.apache.org/dist/cxf/2.7.10/apache-cxf-2.7.10.tar.gz
         tar zxvf apache-cxf-2.7.10.tar.gz
         ln -s apache-cxf-2.7.10 cxf
         export CXF_HOME=/opt/cxf
         export PATH=$CXF_HOME/bin:$PATH
      3. compile nsi2/java/topology
         cd aist-nsi2-20150910/java/topology
         ant clean; ant
      4. compile nsi2/java/clientapiNSI
         cd ../clientapi/
         ant clean; ant
      5. jar files
         cd ../
         ls -l clientapi/build/jar/
         total 356
         -rw-r--r-- 1 okazaki okazaki 361303 Jan 22 11:39 nsi2_client.jar
         ls -l common/build/jar/
         total 496
         -rw-r--r-- 1 okazaki okazaki 504234 Jan 22 11:38 nsi2_common.jar
         ls common/lib/ -l
         total 600
         -rw-r--r-- 1 okazaki okazaki 185140 Sep 10 18:41 commons-io-2.4.jar
         -rw-r--r-- 1 okazaki okazaki  60841 Sep 10 18:41 commons-logging-1.1.1.jar
         -rw-r--r-- 1 okazaki okazaki    231 Sep 10 18:41 jax-ws-catalog.xml
         -rw-r--r-- 1 okazaki okazaki 358180 Sep 10 18:41 log4j-1.2.13.jar
         # Please change "nrm/lib" to "common/lib" in compile.sh
 
      - Please use the apache-ant.
      - Please use the java that is included in the JDK (1.8 later).
		export JAVA_HOME=jdk-install-dir
		export PATH=$JAVA_HOME/bin:$PATH
      - If you use SSL for NSI communication between your requester and aist AG, 
        you must prepare a SSL key for the provider server to get replies from AG. 
        And you must truest the cert of aist AG. Please read java/clientapi/README for details.

2. Setup

2.1 eiSoil

Please read eiSoil document.

2.2 config.xml
TN-RM must describe the end point of felix in the $TNRM/config.xml.
The format is as follows:

    if your domain id,
    <domain domain_id="aist"/>

    if NSIv2 end point,
    <interface felix_domain_id="urn:publicid:IDN+fms:aist:tnrm+stp"
        felix_stp_id="urn:ogf:network:aist.go.jp:2015:gre:bi-ps"
        nsi_stp_id="urn:ogf:network:aist.go.jp:2015:gre:bi-ps"
        vlan="1700-1799"
        capacity="10000"
    />

    if GRE end point,
    <interface felix_domain_id="urn:publicid:IDN+fms:aist:tnrm+stp"
        felix_stp_id="urn:ogf:network:aist.go.jp:2015:gre:bi-ps"
        nsi_stp_id="urn:ogf:network:aist.go.jp:2015:gre:bi-ps"
        vlan="1700-1799"
        capacity="10000"

        type="ovsgre"
        sedev="eth1"
        address="172.21.100.15"
        dpid="0x10"
        ovsdb="tcp:127.0.0.1:44444"
        ryu="http://172.21.100.15:8080"
    />

    felix_domain_id:	felix domain identifier
    felix_stp_id:	felix stp (end point) identifier
    nsi_stp_id:		NSIv2 stp identifier
    vlan:		vlan id,  ex. "1000,2000-3000"
    capacity:		maximum transfer rate (bandwidth), Mbps

    type:		"ovsgre" just only
    sedev:		ethernet device name connect the switch controlled by stitching entity 
    address:		local ip address connect from other gre host
    dpid:		dpid of open vSwitch 
    ovsdb:		ip address of database server for local ovs
    ryu:		ip address of ryu rest service

2.3 nsi2interface.py for NSIv2 parameters

Please note that to access the TN-RM you need Provider Agent or
Aggregator of NSIv2 running. Now this is configured in
nsi2interface.py and the following change must be made in order to
make the connection.

      pNSA = 'urn:ogf:network:aist.go.jp:2013:nsa'
      pURI = 'https://172.22.30.174:28443/nsi2/services/ConnectionProvider'
      rNSA = 'urn:ogf:network:aist.go.jp:2013:nsa'
      rURI = 'https://172.22.30.145:29081/nsi2_requester/services/ConnectionRequester'
      user = ''
      password = ''

      pNSA:	provider NSA
      pURI:	provider URI
      rNSA:	requester NSA
      rURI:	requester URI
      user:	user name
      password:	password

3. start up

3.1 deploy TN-RM service
3.1.1 invoke proxy NSI server for NSIv2 service
      - Please use the jthon (2.7b later).

      $ cd $TNRM
      $ ./proxy.sh

      proxy.sh:
      LOGFILE=/tmp/test.log
      LIBS=jpywork:./
      NSI_HOME=/opt/nsi2/java
      LIBS=./
      LIBS=$LIBS:${NSI_HOME}/clientapi/build/jar/nsi2_client.jar
      LIBS=$LIBS:${NSI_HOME}/nrm/build/jar/aist_upa.jar
      LIBS=$LIBS:${NSI_HOME}/nrm/lib/commons-logging-1.1.1.jar
      LIBS=$LIBS:${NSI_HOME}/nrm/lib/log4j-1.2.13.jar
      LIBS=$LIBS:${NSI_HOME}/nrm/lib/commons-io-2.4.jar
      for i in ${CXF_HOME}/lib/*.jar
      do
         LIBS=$LIBS:"$i"
      done
      export CLASSPATH=$LIBS
      JOPT='-Dpython.cachedir=tmp/cache -v'
      env CLASSPATH=$LIBS jython $JOPT proxy.py 2>&1 | tee $LOGFILE 

3.1.2 invoke TN-RM service in eiSoil 

      $ cd $EISOIL
      $ python src/main.py

3.2 In the host for GRE tunnel.
3.2.1 create Open vSwitch for GRE Tunenel

Setting of OVS is generated by the following script:

      $	BR="ovs1799"
      $ DPID="0000000000000010"
      $ SEDEV="eth1"
      $ CONTROL="tcp:127.0.0.1:6633"
      $ OVSDB="ptcp:44444"
      $
      $ ovs-vsctl br-exists $BR
      $ if [ $? == 0 ]; then
      $    ovs-vsctl del-br $BR
      $ fi
      $ ovs-vsctl add-br $BR
      $ ovs-vsctl add-port $BR $SEDEV
      $ ovs-vsctl set bridge $BR other-config:datapath-id=$DPID
      $ ovs-vsctl set-controller $BR $CONTROL
      $ ovs-vsctl set-manager $OVSDB

      BR:	bridge name of open vSwitch
      SEDEV:	a ethernet device connect to the switch controlled by stitching entity 
      DPID:	datapath id of bridge
      CONTROL:	openflow controller, RYU is controller.
      OVSDB:	database server of open vSwitch

3.2.2 deploy RYU REST service

      $ ryu-manager $RYUDIR/ryu/app/ofctl_rest.py $TNRM/gre-tnrm-rest.py
    	   
4. other
4.1 if you want to change API GENI version from char(3) to int(3), Please use this patch.

 diff -u eiSoil/src/vendor/geniv3rpc/g3rpc/genivthree.py.org eiSoil/src/vendor/geniv3rpc/g3rpc/genivthree.py
--- eiSoil/src/vendor/geniv3rpc/g3rpc/genivthree.py.org	2016-02-04 14:10:52.242767817 +0900
+++ eiSoil/src/vendor/geniv3rpc/g3rpc/genivthree.py	2016-03-08 10:21:04.388613844 +0900
@@ -56,13 +56,17 @@
             return self._errorReturn(e)
                 
         request_rspec_versions = [
-            { 'type' : 'geni', 'version' : '3', 'schema' : 'http://www.geni.net/resources/rspec/3/request.xsd', 'namespace' : 'http://www.geni.net/resources/rspec/3', 'extensions' : request_extensions},]
+            { 'type' : 'geni', 'version' : 3, 'schema' : 'http://www.geni.net/resources/rspec/3/request.xsd', 'namespace' : 'http://www.geni.net/resources/rspec/3', 'extensions' : request_extensions},]
+            # { 'type' : 'geni', 'version' : '3', 'schema' : 'http://www.geni.net/resources/rspec/3/request.xsd', 'namespace' : 'http://www.geni.net/resources/rspec/3', 'extensions' : request_extensions},]
         ad_rspec_versions = [
-                { 'type' : 'geni', 'version' : '3', 'schema' : 'http://www.geni.net/resources/rspec/3/ad.xsd', 'namespace' : 'http://www.geni.net/resources/rspec/3', 'extensions' : ad_extensions },]
-        credential_types = { 'geni_type' : 'geni_sfa', 'geni_version' : '3' }
+            { 'type' : 'geni', 'version' : 3, 'schema' : 'http://www.geni.net/resources/rspec/3/ad.xsd', 'namespace' : 'http://www.geni.net/resources/rspec/3', 'extensions' : ad_extensions },]
+            # { 'type' : 'geni', 'version' : '3', 'schema' : 'http://www.geni.net/resources/rspec/3/ad.xsd', 'namespace' : 'http://www.geni.net/resources/rspec/3', 'extensions' : ad_extensions },]
+        # credential_types = { 'geni_type' : 'geni_sfa', 'geni_version' : '3' }
+        credential_types = [{ 'geni_type' : 'geni_sfa', 'geni_version' : 3 }]
     
         return self._successReturn({ 
-                'geni_api'                    : '3',
+                # 'geni_api'                    : '3',
+                'geni_api'                    : 3,
                 'geni_api_versions'           : { '3' : '/RPC2' }, # this should be an absolute URL
                 'geni_request_rspec_versions' : request_rspec_versions,
                 'geni_ad_rspec_versions'      : ad_rspec_versions,

4.2 if error occurred in between RO and TN-RM as follows, Please use this patch.

[CRITICAL] [tn.py:202] - [tn-utils] manage_allocate exception: [RPCError] Remote Procedure Call Error (TNRMGeniv3 Allocate failure: [Errno 1] _ssl.c:504: error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure)
[ERROR] [handler_v3.py:293] - [handlergeniv3] [SERVERERROR] Server Error ([RPCError] Remote Procedure Call Error (TNRMGeniv3 Allocate failure: [Errno 1] _ssl.c:504: error:14094410:SSL routines:SSL3_READ_BYTES:sslv3 alert handshake failure))

$ diff -u /opt/eiSoil/src/vendor/flaskrpcs/flaskserver.py src/vendor/flaskrpcs/flaskserver.py 
--- /opt/eiSoil/src/vendor/flaskrpcs/flaskserver.py	2016-02-04 08:33:25.247423013 +0900
+++ src/vendor/flaskrpcs/flaskserver.py	2016-03-02 10:32:56.948692132 +0900
@@ -90,12 +90,30 @@
                 import socket
                 application = DebuggedApplication(self._app, True)
                 def inner():
+                  if False:
                     server = serving.make_server(host, app_port, self._app, False, 1, ClientCertHTTPRequestHandler, False, 'adhoc')
                     # The following line is the reason why I copied all that code!
                     if must_have_client_cert:
                         server.ssl_context.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT, lambda a,b,c,d,e: True)
                     # That's it
                     server.serve_forever()
+                  else:
+                    import os
+                    from OpenSSL import SSL
+                    context = SSL.Context(SSL.SSLv23_METHOD)
+                    certs_path = os.path.normpath(os.path.join(os.path.dirname(__file__), "../../.."))
+                    context_crt = os.path.join(certs_path, "admin-cert.pem")
+                    context_key = os.path.join(certs_path, "admin-key.pem")
+                    try:
+                        context.use_certificate_file(context_crt)
+                        context.use_privatekey_file(context_key)
+                    except Exception as e:
+                        logger.critical("error starting flask server. Cert or key is missing under %s", certs_path)
+                        sys.exit(e)
+
+                    server = serving.make_server(host, app_port, self._app, False, 1, ClientCertHTTPRequestHandler, False, ssl_context=context)
+                    server.serve_forever()
+
                 address_family = serving.select_ip_version(host, app_port)
                 test_socket = socket.socket(address_family, socket.SOCK_STREAM)
                 test_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
@@ -104,4 +122,4 @@
                 serving.run_with_reloader(inner, None, 1)
             finally:
                 self._app._got_first_request = False
-            
\ No newline at end of file
+            
